################################################################################
## capture.py
##
## Capture images for various purposes!
##
## This handles three actions that involve capturing.
##    1) Adjusting the "exposure" (offset, gain, exposure time, white balance).
##    2) Focusing.
##    3) Capturing for posterity!
################################################################################

__author__ = "John Jacques"
__version__ = __VERSION__
__license__ = 'MIT'

import logging
import numpy
import os
import select
import statistics
import termplotlib
import time
import zwoasi

from controls import Controls
from PIL import Image
from time import sleep

class Capture(object):

    def __init__(self, camera, logging):
        super().__init__()
        self.camera = camera
        self.logging = logging
        self.controls = camera.get_controls()
        self.logging.debug(f"Created {self}")

    ## setup the camera for a capture
    def setup_capture(self):
        controls = self.camera.get_controls()
        self.camera.set_control_value(zwoasi.ASI_BANDWIDTHOVERLOAD,
                                      controls['BandWidth']['MinValue'])
        self.camera.disable_dark_subtract()
        self.camera.stop_video_capture()
        self.camera.stop_exposure()
        self.camera.set_image_type(zwoasi.ASI_IMG_RGB24)
        ## Without this, camera.capture() can throw an exception!
        ## After the sleep, all captures work...
        sleep(1)

    ## convert the raw capture to an image object
    ## optionally, display the histograms and show some stats
    def convert_to_image(self, raw, show_hist=False, show_stats=False):
        logging.debug(f"convert_to_image({type(raw).__name__}, "
                      "{show_hist}, {show_stats}")
        roi = self.camera.get_roi_format()
        mode = None

        if len(raw.shape) == 3:
            raw = raw[:, :, ::-1]   # convert bgr to rgb

        if roi[3] == zwoasi.ASI_IMG_RAW16:
            mode = 'I;16'

        image = Image.fromarray(raw, mode=mode)

        if show_hist or show_stats:
            histogram = image.histogram()
            histR = histogram[0:255]
            histG = histogram[256:511]
            histB = histogram[512:767]

        if show_hist:
            x = list(range(0, 255))
            figure = termplotlib.figure()
            figure.plot(x, histR, label="histR")
            figure.plot(x, histG, label="histG")
            figure.plot(x, histB, label="histB")
            figure.show()

        if show_stats:
            medR = statistics.median(histR)
            medG = statistics.median(histG)
            medB = statistics.median(histB)
            print(f"median of the histograms {medR}/{medG}/{medB}")
            median_image = numpy.median(raw)
            print(f"median of the image is {median_image}")

        return image

    #############################################################################
    ## adjust
    ##
    ## Takes one capture with the given values, saves the values, displays the
    ## histograms and medians.
    #############################################################################

    def adjust(self, settings_file, values, output_file):

        logging.debug(f"Capture.adjust("
                      f"{settings_file}, {values}, {output_file}")

        ## As we're adjusting the "exposure", don't use a
        ## settings file.  Start with the defaults and add
        ## changes passed in 'settings'.
        controls = Controls(self.camera, self.logging)
        controls.default()

        ## 'values' should be a list of values to write to the
        ## camera's controls as name, value pairs.
        it = iter(values)
        for name in it:
            value = next(it)
            logging.debug(f"Setting {name} to {value}")
            controls.set(name, int(value))

        ## Once set, save to the 'settings_file" for future use!
        controls.save(settings_file)

        ## Set the camera up for capture.
        self.setup_capture()

        ## Take one capture and save it.
        raw = self.camera.capture()
        image = self.convert_to_image(raw, True, True)
        image.save(output_file)
        controls.save(output_file + ".info", True)

    #############################################################################
    ## focus
    ##
    ## Keep taking captures with a small delay using the given camera
    ## control values from 'settings_file'.
    #############################################################################

    def focus(self, settings_file, output_file):

        logging.debug(f"Capture.focus("
                      f"{settings_file}, {output_file}")

        ## Load the settings.
        controls = Controls(self.camera, self.logging)
        controls.load(settings_file)

        ## Set the camera up for capture.
        self.setup_capture()

        ## Keep capturing images until interrupted.
        try:
            while True:
                raw = self.camera.capture()
                image = self.convert_to_image(raw)
                image.save(output_file)
        except KeyboardInterrupt:
            print()
            logging.debug("Capture.focus: Ending...")

    #############################################################################
    ## capture
    ##
    ## Capture, with settings from the given file, one or more images.
    ##
    ## 'settings' is a file (binary) containing values for the controls.
    ## 'output' is the name of the image(s) to save.  If 'number' is not 1,
    ##     the name has N* added to the name just before the suffix.
    #############################################################################

    def capture(self, settings, output, number):

        logging.debug(f"Capture.adjust("
                      f"{settings}, {output}. {number})")

        ## Load the settings.
        controls = Controls(self.camera, self.logging)
        controls.load(settings)

        ## Set the camera up for capture.
        self.setup_capture()

        ## Get the captures.
        for i in range(0, number, 1):
            if number > 1:
                name = output.split('.')
                name = name[0] + str(i).zfill(len(str(number))) + "." + name[1]
            else:
                name = output

            raw = self.camera.capture()
            image = self.convert_to_image(raw)
            image.save(name)

        ## Save the control values used in a file.
        if number > 1:
            name = output.split('.')
            name = name[0] + 'N' * len(str(number)) + '.' + name[1] + '.info'
        else:
            name = output + '.info'

        controls.save(name, True)
