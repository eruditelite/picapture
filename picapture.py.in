#!/usr/bin/env python3

################################################################################
## picapture.py
################################################################################

__author__ = "John Jacques"
__version__ = __VERSION__
__license__ = 'MIT'

import argparse
import logging
import numpy as np
import numpy
import os
import pickle
import PIL
import re
import select
import socketserver
import statistics
import sys
import tempfile
import termplotlib
import threading
import time
import zwoasi

from controls import Controls
from datetime import datetime
from http import server
from io import BytesIO
from math import log2, pow
## NOTE: PIL is really Pillow...
from PIL import Image, ImageDraw, ImageFont, ImageStat
from queue import Queue
from threading import Condition, Thread
from time import sleep, time

################################################################################
## Functions for Modular Use
################################################################################

def script_info():
    print("--> " + os.path.basename(__file__) +
          " version is {:s}".format(__version__))
    if os.path.isfile("/etc/os-release"):
        osrf = open("/etc/os-release", "rt")
        distribution = re.search("NAME=(.*)", osrf.read()).group(1)[1:-1]
        osrf.seek(0)
        version = re.search("VERSION_ID=(.*)", osrf.read()).group(1)[1:-1]
        osrf.close()
        print("--> running on " + distribution + ":" + version)
    else:
        print("--> running on something unknown (TODO: find out)")

def save_capture(camera, filename):
    controls = camera.get_controls()
    camera.set_control_value(zwoasi.ASI_BANDWIDTHOVERLOAD,
                             controls['BandWidth']['MinValue'])
    camera.disable_dark_subtract()
    camera.stop_video_capture()
    camera.stop_exposure()
    camera.set_image_type(zwoasi.ASI_IMG_RGB24)
    camera.capture(filename=filename)

def setup_capture(camera):
    controls = camera.get_controls()
    camera.set_control_value(zwoasi.ASI_BANDWIDTHOVERLOAD,
                             controls['BandWidth']['MinValue'])
    camera.disable_dark_subtract()
    camera.stop_video_capture()
    camera.stop_exposure()
    camera.set_image_type(zwoasi.ASI_IMG_RGB24)
    ## Without this, camera.capture() can throw an exception!
    ## After the sleep, all captures work...
    sleep(1)

def to_image(camera, raw, stats=False, hist=False):
    logging.debug(f"to_image({camera}, {type(raw).__name__}, {stats}, {hist}")
    roi = camera.get_roi_format()
    mode = None

    if len(raw.shape) == 3:
        raw = raw[:, :, ::-1]   # convert bgr to rgb
    if roi[3] == zwoasi.ASI_IMG_RAW16:
        mode = 'I;16'

    image = PIL.Image.fromarray(raw, mode=mode)
    histogram = image.histogram()
    histR = histogram[0:255]
    histG = histogram[256:511]
    histB = histogram[512:767]
    median_histogram = statistics.median(histogram)

    if hist:
        x = list(range(0, 255))
        figure = termplotlib.figure()
        figure.plot(x, histR, label="histR")
        figure.plot(x, histG, label="histG")
        figure.plot(x, histB, label="histB")
        figure.show()

    if stats:
        medR = statistics.median(histR)
        medG = statistics.median(histG)
        medB = statistics.median(histB)
        print(f"median of the histograms {medR}/{medG}/{medB}")
        median_image = numpy.median(raw)
        print(f"median of the image is {median_image}")

    return image

################################################################################
## Information
################################################################################

def info(camera):
    info = camera.get_camera_property()
    print('#### Info for %s ####' % (info['Name']))
    for name in info.keys():
        if name == 'Name':
            continue
        print('    %s:%s' % (name, info[name]))
    controls = Controls(camera, logging)
    controls.display()

################################################################################
## Capture
##
## NOTE: This handles the 'adjust' and 'focus' commands as well.
################################################################################

def capture(camera, settings, options):
    info = camera.get_camera_property()
    ctrls = camera.get_controls()
    controls = Controls(camera, logging)
    logging.debug("capture(): Using %s, options are %s." %
                  (info['Name'], str(options[:])))
    controls.default()

    # Process Arguments #
    #####################
    adjust = False
    focus = False
    histogram = False
    it = iter(options)
    for name in it:
        value = next(it)
        logging.debug("capture(): Processing %s %s" % (name, value))
        if name == 'output':
            filename = value
        elif name == 'number':
            number = int(value);
        elif name == 'adjust' and value == "true":
            adjust = True
        elif name == 'focus' and value == "true":
            focus = True
        elif name == 'histogram' and value == "true":
            histogram = True
        else:
            controls.set(name, int(value))

    if adjust == True and focus == True:
        raise ValueError("only one of adjust or focus can be chosen!")

    if adjust == False:
        histogram = False

    if adjust and number != 1:
        logging.warn("Adjust is True, so setting number to 1!")

    controls.save(settings)

    if 'filename' not in locals() or filename == "":
        raise ValueError("output MUST be specified!")

    # Capture! #
    ############

    setup_capture(camera)

    if focus:
        try:
            while True:
                raw = camera.capture()
                image = to_image(camera, raw)
                image.save(filename)
                sleep(2)
        except KeyboardInterrupt:
            logging.debug("Cleaning up...")
    elif 'number' not in locals() or number == 1:
        raw = camera.capture()
        image = to_image(camera, raw, adjust, histogram)
        image.save(filename)
        controls.save(filename + ".info", True)
    else:
        for i in range(0, number, 1):
            name = filename.split('.')
            name = name[0] + str(i).zfill(len(str(number))) + "." + name[1]
            raw = camera.capture()
            image = to_image(camera, raw)
            image.save(name)
        name = filename.split('.')
        name = name[0] + 'N' * len(str(number)) + '.' + name[1] + '.info'
        controls.save(name, True)

################################################################################
## When used as a script...
################################################################################

def main(argv):
    # parse arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('--loglevel', help="logger level",
                        choices=['DEBUG', 'INFO', 'WARNING',
                                 'ERROR', 'CRITICAL'], type=str.upper)
    parser.add_argument("--logfile", help="file for logger output")
    parser.add_argument('-v', '--version', help="display the version",
                        action="store_true")
    parser.add_argument('-c', '--command',
                        help="Run a command: <index of camera> "
                        "[list of name=value pairs]",
                        choices = ['list', 'info', 'exposure',
                                   'focus', 'capture'],
                        default="list")
    args, unknown = parser.parse_known_args()

    # set up the logger
    if args.loglevel:
        loglevel = getattr(logging, args.loglevel)
    else:
        loglevel = logging.root.level

    logging.basicConfig(level=loglevel,
                        format='%(filename)s - %(levelname)s - %(message)s')

    if args.logfile:
        logging.getLogger().addHandler(logging.FileHandler(args.logfile))

    if args.version:
        script_info()

    asilib = os.getenv('ZWO_ASI_LIB')

    if asilib:
        zwoasi.init(asilib)
    else:
        logging.error("ZWO_ASI_LIB must be the full path to libASICamera2.so!")
        sys.exit(1)

    num_cameras = zwoasi.get_num_cameras()

    if num_cameras == 0:
        logging.error("No Cameras Found")
        sys.exit(1)
    else:
        logging.info("Cameras Found: " + str(num_cameras))

    cameras = zwoasi.list_cameras()

    if args.command == 'list':
        for i in range(num_cameras):
            print('%d : %s' % (i, cameras[i]))
        sys.exit(0)

    id = int(unknown[0])
    if id < num_cameras:
        camera = zwoasi.Camera(id)
    else:
        logging.error('Invalid Camera ID')
        sys.exit(1)

    unknown.pop(0)
    unknown = [x for y in unknown for x in y.split('=')]

    settings = cameras[id] + "_" + str(id) + ".settings"
    settings = settings.replace(" ", "_")

    logging.info("args.commad: " + args.command + " unknown: " +
                 repr(unknown) + " settings " + settings)

    # The rest of 'unknown' should be name/value pairs.

    if args.command == 'info':
        info(camera)
    elif args.command == 'exposure':
        capture(camera, settings,
                [ 'number', '1', 'adjust', 'true', 'histogram', 'true' ] +
                unknown)
    elif args.command == 'focus':
        capture(camera, settings, [ 'focus', 'true' ] + unknown)
    elif args.command == 'capture':
        capture(camera, settings, unknown)
    else:
        logging.error("Unknown command: " + command)
        sys.exit(1)

    logging.info('Done!')
    sys.exit(0)

if __name__ == "__main__":
    main(sys.argv[1:])
