#!/usr/bin/env python3

################################################################################
## picapture.py
################################################################################

__author__ = "John Jacques"
__version__ = __VERSION__
__license__ = 'MIT'

import argparse
import logging
import os
import sys
import textwrap
import zwoasi

from capture import Capture
from controls import Controls

################################################################################
## Functions for Modular Use
################################################################################

def script_info():
    print("--> " + os.path.basename(__file__) +
          " version is {:s}".format(__version__))
    if os.path.isfile("/etc/os-release"):
        osrf = open("/etc/os-release", "rt")
        distribution = re.search("NAME=(.*)", osrf.read()).group(1)[1:-1]
        osrf.seek(0)
        version = re.search("VERSION_ID=(.*)", osrf.read()).group(1)[1:-1]
        osrf.close()
        print("--> running on " + distribution + ":" + version)
    else:
        print("--> running on something unknown (TODO: find out)")

################################################################################
## Information
################################################################################

def info(camera):
    info = camera.get_camera_property()
    print('#### Info for %s ####' % (info['Name']))
    for name in info.keys():
        if name == 'Name':
            continue
        print('    %s:%s' % (name, info[name]))
    controls = Controls(camera, logging)
    controls.display()

################################################################################
## When used as a script...
################################################################################

def main(argv):
    # parse arguments
    parser = argparse.ArgumentParser(
        prog='picapture',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=textwrap.dedent('''\
Expected use would be to run 'list' to find a camera, 'info' if
needed, 'adjust' to set the exposure (note that this step saves a file
with the selected control values for the given camera!), 'focus' to
focus, and then 'capture' to capture.  'focus' and 'capture' use the
control values saved by 'adjust', so run 'adjust' again to change
control values.

-c list
    List the available cameras.
-c info <camera index>
    Display the properties and controls of the given camera.
-c adjust <camera> <scale> [<control name>=<value>, ...]
    Set the value(s) of the control(s) for the given camera.  A
    file is saved containing the values for all the controls.
-c focus <camera> <scale>
    Continually update the image.
        ''')
    )
    parser.add_argument('--loglevel', help="logger level",
                        choices=['DEBUG', 'INFO', 'WARNING',
                                 'ERROR', 'CRITICAL'], type=str.upper)
    parser.add_argument("--logfile", help="file for logger output")
    parser.add_argument('-v', '--version', help="display the version",
                        action="store_true")
    parser.add_argument('-c', '--command',
                        help="Run a command: <index of camera>"
                        "[list of name=value pairs]",
                        choices = ['list', 'info', 'adjust', 'focus', 'capture'],
                        default="list",
                        metavar='')
    args, unknown = parser.parse_known_args()

    # set up the logger
    if args.loglevel:
        loglevel = getattr(logging, args.loglevel)
    else:
        loglevel = logging.root.level

    logging.basicConfig(level=loglevel,
                        format='%(filename)s - %(levelname)s - %(message)s')

    if args.logfile:
        logging.getLogger().addHandler(logging.FileHandler(args.logfile))

    if args.version:
        script_info()

    asilib = os.getenv('ZWO_ASI_LIB')

    if asilib:
        zwoasi.init(asilib)
    else:
        logging.error("ZWO_ASI_LIB must be the full path to libASICamera2.so!")
        sys.exit(1)

    num_cameras = zwoasi.get_num_cameras()

    if num_cameras == 0:
        logging.error("No Cameras Found")
        sys.exit(1)
    else:
        logging.info("Cameras Found: " + str(num_cameras))

    cameras = zwoasi.list_cameras()

    if args.command == 'list':
        for i in range(num_cameras):
            print('%d : %s' % (i, cameras[i]))
        sys.exit(0)

    id = int(unknown[0])
    if id < num_cameras:
        camera = zwoasi.Camera(id)
    else:
        logging.error('Invalid Camera ID')
        sys.exit(1)

    unknown.pop(0)
    unknown = [x for y in unknown for x in y.split('=')]

    settings = cameras[id] + "_" + str(id) + ".settings"
    settings = settings.replace(" ", "_")

    logging.info("args.commad: " + args.command + " unknown: " +
                 repr(unknown) + " settings " + settings)

    # The rest of 'unknown' should be name/value pairs.

    if args.command == 'info':
        info(camera)
    elif args.command == 'adjust':
        scale = unknown[0]
        unknown.pop(0)
        capture = Capture(camera, logging)
        capture.adjust(settings, scale, unknown)
    elif args.command == 'focus':
        scaling = unknown[0]
        capture = Capture(camera, logging)
        capture.focus(settings, scaling)
    elif args.command == 'capture':
        number = unknown[0]
        output = unknown[1]
        capture = Capture(camera, logging)
        capture.capture(settings, output, int(number))
    else:
        logging.error("Unknown command: " + command)
        sys.exit(1)

    logging.info('Done!')
    sys.exit(0)

if __name__ == "__main__":
    main(sys.argv[1:])
