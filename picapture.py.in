#!/usr/bin/env python3

################################################################################
## picapture.py
################################################################################

__author__ = "John Jacques"
__version__ = __VERSION__
__license__ = 'MIT'

import argparse
import logging
import os
import re
import sys
import textwrap
import zwoasi

from capture import Capture
from controls import Controls

################################################################################
## Functions for Modular Use
################################################################################

def script_info():
    print("--> " + os.path.basename(__file__) +
          " version is {:s}".format(__version__))
    if os.path.isfile("/etc/os-release"):
        osrf = open("/etc/os-release", "rt")
        distribution = re.search("NAME=(.*)", osrf.read()).group(1)[1:-1]
        osrf.seek(0)
        version = re.search("VERSION_ID=(.*)", osrf.read()).group(1)[1:-1]
        osrf.close()
        print("--> running on " + distribution + ":" + version)
    else:
        print("--> running on something unknown (TODO: find out)")

################################################################################
## Information
################################################################################

def info(camera):
    info = camera.get_camera_property()
    print('#### Info for %s ####' % (info['Name']))
    for name in info.keys():
        if name == 'Name':
            continue
        print('    %s:%s' % (name, info[name]))
    controls = Controls(camera, logging)
    controls.display()

################################################################################
## When used as a script...
################################################################################

def main(argv):
    # parse arguments
    parser = argparse.ArgumentParser(
        prog='picapture',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=textwrap.dedent('''\
Expected use would be to run 'list' to find a camera, 'info' if
needed, 'adjust' to set the exposure (note that this step saves a file
with the selected control values for the given camera!), 'focus' to
focus, and then 'capture' to capture.  'focus' and 'capture' use the
control values saved by 'adjust', so run 'adjust' again to change
control values.

-c list
    List the available cameras.

For the rest of the commands, -i|--index is required.

-c info
    Display the properties and controls of the given camera.

For the rest of the commands, -r|--roi and -s|--scale are optional.

-c adjust [<control name>=<value>, ...]
    Set the value(s) of the control(s) for the given camera.  A
    file is saved containing the values for all the controls.

-c focus
    Continually update the image.

-c capture <number of images> <output name.type>
    Capture <number of images> images.
        ''')
    )
    parser.add_argument('-c', '--command',
                        help="run a command -- see description below",
                        choices = ['list', 'info', 'adjust', 'focus', 'capture'],
                        default="list",
                        metavar='')
    parser.add_argument('-i', '--index', help="camera index", metavar='')
    parser.add_argument("--logfile", help="file for logger output")
    parser.add_argument('--loglevel',
                        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR',
                                 'CRITICAL'], type=str.upper)
    parser.add_argument('-r', '--roi',
                        help="region of intrest -- x+y+width+height", metavar='')
    parser.add_argument('-s', '--scale',
                        help="scale for adjust/focus", metavar='')
    parser.add_argument('-v', '--version', help="display the version",
                        action="store_true")

    args, unknown = parser.parse_known_args()

    # set up the logger
    if args.loglevel:
        loglevel = getattr(logging, args.loglevel)
    else:
        loglevel = logging.root.level

    logging.basicConfig(level=loglevel,
                        format='%(filename)s - %(levelname)s - %(message)s')

    if args.logfile:
        logging.getLogger().addHandler(logging.FileHandler(args.logfile))

    if args.version:
        script_info()

    logging.info(f"args {args} unknown {unknown}")

    # find the ZWO library
    asilib = os.getenv('ZWO_ASI_LIB')

    if asilib:
        zwoasi.init(asilib)
    else:
        logging.error("ZWO_ASI_LIB must be the full path to libASICamera2.so!")
        sys.exit(1)

    # find cameras
    num_cameras = zwoasi.get_num_cameras()

    if num_cameras == 0:
        logging.error("No Cameras Found")
        sys.exit(1)
    else:
        logging.info("Cameras Found: " + str(num_cameras))

    cameras = zwoasi.list_cameras()

    for i in range(num_cameras):
        settings = cameras[i] + ".settings"
        settings = settings.replace(" ", "_")
        if not os.path.isfile(settings):
            camera = zwoasi.Camera(i)
            controls = Controls(camera, logging)
            controls.default()
            controls.save(settings)

    # handle the 'list' command
    if args.command == 'list':
        for i in range(num_cameras):
            print('%d : %s' % (i, cameras[i]))
        sys.exit(0)

    # for the rest of the commands, a camera index is required
    if args.index is None:
        logging.error("Camera index is required!")
        sys.exit(1)

    id = int(args.index)
    if id < num_cameras:
        camera = zwoasi.Camera(id)
    else:
        logging.error('Invalid Camera ID')
        sys.exit(1)

    # validate the scale, if given
    if args.scale:
        scale = float(args.scale)
    else:
        scale = 1.0

    logging.info(f"scale is {scale}")

    # validate the ROI if given
    properties = camera.get_camera_property()

    if args.roi:
        roi = re.split('[xX\+]', args.roi)
        if (int(roi[0]) + int(roi[2])) > int(properties['MaxWidth']):
            logging.error(f"x + x offset {int(roi[0]) + int(roi[2])} > "
                          f"width {int(properties['MaxWidth'])}!")
            sys.exit(1)
        elif (int(roi[1]) + int(roi[3])) > int(properties['MaxHeight']):
            logging.error(f"y + y offset {int(roi[1]) + int(roi[3])} > "
                          f"width {int(properties['MaxHeight'])}!")
            sys.exit(1)
    else:
        roi = (int(properties['MaxWidth']), int(properties['MaxHeight']), 0, 0)

    logging.info(f"ROI is {roi}")

    # everything else should be list of name=value control settings
    unknown = [x for y in unknown for x in y.split('=')]
    logging.info(f"Camera control name=value pairs: {unknown}")

    # come up with a name for the "settings" file and create it with the
    # default values if there isnÂ´t one.
    # NOTE: this assumes every attached camera is a different model
    settings = cameras[id] + ".settings"
    settings = settings.replace(" ", "_")
    logging.info(f"Settings file is {settings}")

    # handle the rest of the commands
    if args.command == 'info':
        info(camera)
    elif args.command == 'adjust':
        capture = Capture(camera, logging)
        capture.adjust(settings, scale, roi, unknown)
    elif args.command == 'focus':
        capture = Capture(camera, logging)
        capture.focus(settings, scale, roi)
    elif args.command == 'capture':
        number = unknown[0]
        output = unknown[1]
        capture = Capture(camera, logging)
        capture.capture(settings, roi, int(number), output)
    else:
        logging.error("Unknown command: " + command)
        sys.exit(1)

    logging.info('Done!')
    sys.exit(0)

if __name__ == "__main__":
    main(sys.argv[1:])
